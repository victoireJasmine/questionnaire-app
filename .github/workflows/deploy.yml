name: CI/CD Deployment to Scaleway

on:
  push:
    branches:
      - main

jobs:
  # ✅ Test d'intégration backend (Jest + Supertest)
  test_backend:
    name: Run Backend Integration Tests
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:7.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Set environment variables
        run: echo "MONGO_URI=mongodb://localhost:27017/testdb" >> $GITHUB_ENV

      - name: Run Backend Integration Tests
        run: |
          cd backend
          npm test

  # ✅ Test unitaire frontend (Vitest)
  test_frontend:
    name: Run Frontend Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run Frontend Unit Tests
        run: |
          cd frontend
          npm run test

  # ✅ Déploiement sur Scaleway
  deploy:
    name: Deploy to Scaleway
    runs-on: ubuntu-latest
    needs: [test_backend, test_frontend]  # Attendre que les tests passent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SCALEWAY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SCALEWAY_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh ${{ secrets.SCALEWAY_USER }}@${{ secrets.SCALEWAY_HOST }} <<EOF
            set -e  # Arrête le script en cas d'erreur
            cd ~/questionnaire-app
            git reset --hard origin/main  # Supprime les changements locaux
            git pull origin main  # Récupère les dernières modifications
            sudo docker compose down
            sudo docker system prune -af  # Nettoie les anciens conteneurs/images
            sudo docker compose build --no-cache frontend  # Rebuild complet du frontend
            sudo docker compose up -d --build
            sudo systemctl restart nginx  # Redémarre Nginx
            exit
          EOF
